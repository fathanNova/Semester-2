#include <mega32.h>
#include <stdlib.h>
#include <delay.h>
#include <alcd.h>

#define ADC_VREF_TYPE ((1<<REFS0) | (0<<REFS1) | (0<<ADLAR))  

// Inisialisasi ADC, secara otomatis akan ada jika saat awal konfigurasi mengenable ADC.
unsigned int read_adc(unsigned char adc_input)
{
    ADMUX = adc_input | ADC_VREF_TYPE;  // Pilih channel ADC
    delay_ms(10);                       // Stabilization delay
    ADCSRA |= (1<<ADSC);                // Start conversion
    while ((ADCSRA & (1<<ADIF)) == 0);  // Tunggu selesai
    ADCSRA |= (1<<ADIF);                // Reset flag
    return ADCW;                        // Return nilai ADC
}

// Rumus adalah sebuah fungsi untuk mengkonversi nilai dari ADC menjadi nilai suhu 
// dalam derajat celcius.
// adc_value memiliki rentang nilai antara 0-1023, jumlahnya 1024.
// 5.0 adalah tegangan reverensi (5V)
// Untuk memperoleh suhu maka nilai dari voltage dikalikan dengan 100.
// Pada sensor LM35, setiap 0,01V bernilai 1ºC. 
float Rumus(unsigned int adc_value)
{
    float voltage = (adc_value * 5.0) / 1024.0;
    return voltage * 100.0;
}

void main(void)
{
    char dataSuhu[10];
    float suhu;
    char gas;
    char flame;
    char alarmAktif = 0;
    int i;
    
    // PORTA 0-7 merupakan bagian yang akan terhubung dengan perangkat sensor
    DDRA = 0x00;     
    PORTA = 0x00;
    // PORTC 0-7 merupakan bagian output data untuk LCD
    DDRC = 0xFF;      
    PORTC = 0x00;
    // PORTD7 (0x80 dalam hexa) merupakan bagian untuk perangkat speaker
    DDRD = 0x80;  
    PORTD = 0x00;
     
    // Inisialisasi ADC, akan ada secara otomatis juga saat enable ADC.
     ADMUX=ADC_VREF_TYPE;
     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0); 
     
    lcd_init(16);
    lcd_clear();

    while (1)
    {
        // Mengisi variable suhu dengan hasil dari perhitungan di fungsi Rumus.
        suhu = Rumus(read_adc(0));  
        
        // ftoa adalah fungsi untuk mengubah nilai float ke string.
        // Data dari variable suhu yang berupa float, diubah menjadi string dan disimpan ke
        // dataSuhu. 
        ftoa(suhu, 1, dataSuhu);
        
        gas = PINA.1; // Nilai dari gas berupa PINA.1 saat ini.
        flame = PINA.2; // Nilai dari flame berupa PINA.2 saat ini.
        alarmAktif = 0;
        
        // Menampilkan output suhu pada LCD.
        lcd_gotoxy(0, 0);
        lcd_puts("Monitor Suhu   ");
        lcd_gotoxy(0, 1);
        lcd_puts("Suhu : ");
        lcd_puts(dataSuhu);  
         
        // 223 merupakan kode ASCII yang akan menampilkan simbol derajat (º) pada LCD berbasis
        // HD44780.
        lcd_putchar(223);
        lcd_puts("C    ");
        
        // Menampilkan output kondisi saat ini pada LCD
        lcd_gotoxy(0,3);
        if(gas && flame)
        {    
        // Jarak yang lebar antara teks dengan penutup petik dua string (") dimaksudkan agar
        // teks yang tampil di LCD saat kondisi berubah tidak saling tertimpa.
         lcd_puts("KEBAKARAN!           "); 
         alarmAktif = 1;
        }
        else if(gas) 
        {
          lcd_puts("GAS TERDETEKSI!         ");
          alarmAktif = 1;
        }
        else if(flame)
        {
         lcd_puts("API TERDETEKSI!          ");
         alarmAktif = 1;
        } 
        else if(suhu >= 30.0 && suhu <= 34.5)
        {
         lcd_puts("SUHU MENINGKAT!         ");
        }
        else if(suhu >= 35.0)
        {
         lcd_puts("SUHU TINGGI!         ");
         alarmAktif = 1;
        }
        else
        {
         lcd_puts("AMAN                 ");
        }                   
        
        // Pengecekan kondisi dari alarmAktif
        if (alarmAktif)
        { 
        // Perulangan untuk membunyikan Alarm 
         for(i = 0; i < 50; i++)
         {         
            PORTD.7 = 0;      
            delay_us(2700);
            PORTD.7 = 1;
            delay_us(2700);
         } 
        }
        else
        {
            PORTD.7 = 0;     
            delay_ms(500);          
        }
        //delay_ms(10);
    }
}