;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;#include <alcd.h>
;
;#define ADC_VREF_TYPE ((1<<REFS0) | (0<<REFS1) | (0<<ADLAR))
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B     ADMUX = adc_input | ADC_VREF_TYPE;  // Pilih channel ADC
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000C     delay_ms(10);                       // Stabilization delay
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000D     ADCSRA |= (1<<ADSC);                // Start conversion
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000E     while ((ADCSRA & (1<<ADIF)) == 0);  // Tunggu selesai
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 000F     ADCSRA |= (1<<ADIF);                // Reset flag
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0010     return ADCW;                        // Return nilai ADC
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0011 }
;PCODE: $00000023 VOL: 0
;
;
;float Rumus(unsigned int adc_value)
; 0000 0015 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0016     float voltage = (adc_value * 5.0) / 1024.0;
; 0000 0017     return voltage * 100.0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	adc_value -> Y+4
;	voltage -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0018 }
;PCODE: $00000035 VOL: 0
;
;void main(void)
; 0000 001B {
;PCODE: $00000036 VOL: 0
; 0000 001C     char dataSuhu[10];
; 0000 001D     float suhu;
; 0000 001E     unsigned char gas;
; 0000 001F     unsigned char flame;
; 0000 0020     unsigned char alarmAktif = 0;
; 0000 0021     int i;
; 0000 0022 
; 0000 0023     DDRA = 0x00;
;PCODE: $00000037 VOL: 0
;	dataSuhu -> Y+4
;	suhu -> Y+0
;	gas -> R17
;	flame -> R16
;	alarmAktif -> R19
;	i -> R20,R21
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0024     PORTA = 0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0025 
; 0000 0026     DDRC = 0xFF;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0027     PORTC = 0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0028 
; 0000 0029     DDRD = 0x80;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002A     PORTD = 0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002B 
; 0000 002C 
; 0000 002D     ADMUX = ADC_VREF_TYPE;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 002E     ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // Enable ADC, prescaler 128
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002F     SFIOR = 0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0030 
; 0000 0031     lcd_init(16);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0032     lcd_clear();
;PCODE: $0000004E VOL: 0
; 0000 0033 
; 0000 0034     while (1)
;PCODE: $0000004F VOL: 0
; 0000 0035     {
; 0000 0036 
; 0000 0037         suhu = Rumus(read_adc(0));
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0038         ftoa(suhu, 1, dataSuhu);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0039 
; 0000 003A         gas = PINA.1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003B         flame = PINA.2;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003C         alarmAktif = 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D 
; 0000 003E         lcd_gotoxy(0, 0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003F         lcd_puts("Monitor Suhu   ");
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0040         lcd_gotoxy(0, 1);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0041         lcd_puts("Suhu : ");
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0042         lcd_puts(dataSuhu);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0043         lcd_putchar(223);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0044         lcd_puts("C    ");
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0045 
; 0000 0046         lcd_gotoxy(0,3);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0047         if(gas && flame)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0048         {
; 0000 0049          lcd_puts("KEBAKARAN!           ");
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004A          alarmAktif = 1;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004B         }
; 0000 004C         else if(gas)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004D         {
; 0000 004E           lcd_puts("GAS TERDETEKSI!         ");
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004F           alarmAktif = 1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0050         }
; 0000 0051         else if(flame)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0052         {
; 0000 0053          lcd_puts("API TERDETEKSI!          ");
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0054          alarmAktif = 1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0055         }
; 0000 0056         else if(suhu >= 35.0)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0057         {
; 0000 0058          lcd_puts("SUHU TINGGI!         ");
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0059          alarmAktif = 1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005A         }
; 0000 005B         else
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005C         {
; 0000 005D          lcd_puts("AMAN                 ");
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 005E         }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005F 
; 0000 0060         if (alarmAktif)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0061         {
; 0000 0062             //PORTD.7 = 1;
; 0000 0063          for(i = 0; i < 50; i++)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0064          {
; 0000 0065             PORTD.7 = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0066             delay_us(2700);
;PCODE: $000000BC VOL: 0
; 0000 0067             PORTD.7 = 1;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0068             delay_us(2700);
;PCODE: $000000BF VOL: 0
; 0000 0069          }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 006A         }
; 0000 006B         else
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 006C         {
; 0000 006D             PORTD.7 = 0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 006E             delay_ms(500);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 006F         }
;PCODE: $000000CB VOL: 0
; 0000 0070         //delay_ms(10);
; 0000 0071     }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0072 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0

	.DSEG
_0x9:
	.BYTE 0x93
