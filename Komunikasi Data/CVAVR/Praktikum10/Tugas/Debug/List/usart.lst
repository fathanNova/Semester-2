
AVRASM ver. 2.1.30  E:\CVAVR\Praktikum10\Tugas\Debug\List\usart.asm Mon Jun 16 19:07:08 2025

E:\CVAVR\Praktikum10\Tugas\Debug\List\usart.asm(1083): warning: Register r5 already defined by the .DEF directive
E:\CVAVR\Praktikum10\Tugas\Debug\List\usart.asm(1084): warning: Register r4 already defined by the .DEF directive
E:\CVAVR\Praktikum10\Tugas\Debug\List\usart.asm(1085): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 12,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0079 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 694b
000034 6972
000035 206d
000036 6144      	.DB  0x4B,0x69,0x72,0x69,0x6D,0x20,0x44,0x61
000037 6174
000038 5520
000039 4153
00003a 5452      	.DB  0x74,0x61,0x20,0x55,0x53,0x41,0x52,0x54
00003b 0d20
00003c 5400
00003d 6b65
00003e 6e61      	.DB  0x20,0xD,0x0,0x54,0x65,0x6B,0x61,0x6E
00003f 5420
000040 6d6f
000041 6f62
000042 206c      	.DB  0x20,0x54,0x6F,0x6D,0x62,0x6F,0x6C,0x20
000043 6e55
000044 7574
000045 206b
000046 654d      	.DB  0x55,0x6E,0x74,0x75,0x6B,0x20,0x4D,0x65
000047 676e
000048 7269
000049 6d69
00004a 4420      	.DB  0x6E,0x67,0x69,0x72,0x69,0x6D,0x20,0x44
00004b 7461
00004c 2061
00004d 000d
00004e 6146      	.DB  0x61,0x74,0x61,0x20,0xD,0x0,0x46,0x61
00004f 6874
000050 6e61
000051 4e20
000052 766f      	.DB  0x74,0x68,0x61,0x6E,0x20,0x4E,0x6F,0x76
000053 2061
000054 7241
000055 6f72
000056 6179      	.DB  0x61,0x20,0x41,0x72,0x72,0x6F,0x79,0x61
000057 206e
000058 000d
000059 6146
00005a 6874      	.DB  0x6E,0x20,0xD,0x0,0x46,0x61,0x74,0x68
00005b 6e61
00005c 4e20
00005d 766f
00005e 2061      	.DB  0x61,0x6E,0x20,0x4E,0x6F,0x76,0x61,0x20
00005f 7241
000060 6f72
000061 6179
000062 006e      	.DB  0x41,0x72,0x72,0x6F,0x79,0x61,0x6E,0x0
000063 6f54
000064 626d
000065 6c6f
000066 3220      	.DB  0x54,0x6F,0x6D,0x62,0x6F,0x6C,0x20,0x32
000067 3200
000068 2e34
000069 3131
00006a 362e      	.DB  0x0,0x32,0x34,0x2E,0x31,0x31,0x2E,0x36
00006b 3630
00006c 2034
00006d 000d
00006e 3432      	.DB  0x30,0x36,0x34,0x20,0xD,0x0,0x32,0x34
00006f 312e
000070 2e31
000071 3036
000072 3436      	.DB  0x2E,0x31,0x31,0x2E,0x36,0x30,0x36,0x34
E:\CVAVR\Praktikum10\Tugas\Debug\List\usart.asm(1139): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x0
                 _0x2000003:
000074 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000075 0002      	.DW  0x02
000076 0260      	.DW  __base_y_G100
000077 00e8      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000078 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000079 94f8      	CLI
00007a 27ee      	CLR  R30
00007b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007c e0f1      	LDI  R31,1
00007d bffb      	OUT  GICR,R31
00007e bfeb      	OUT  GICR,R30
00007f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000080 e08d      	LDI  R24,(14-2)+1
000081 e0a2      	LDI  R26,2
000082 27bb      	CLR  R27
                 __CLEAR_REG:
000083 93ed      	ST   X+,R30
000084 958a      	DEC  R24
000085 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000086 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000087 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000088 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000089 93ed      	ST   X+,R30
00008a 9701      	SBIW R24,1
00008b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008c eeea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008e 9185      	LPM  R24,Z+
00008f 9195      	LPM  R25,Z+
000090 9700      	SBIW R24,0
000091 f061      	BREQ __GLOBAL_INI_END
000092 91a5      	LPM  R26,Z+
000093 91b5      	LPM  R27,Z+
000094 9005      	LPM  R0,Z+
000095 9015      	LPM  R1,Z+
000096 01bf      	MOVW R22,R30
000097 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000098 9005      	LPM  R0,Z+
000099 920d      	ST   X+,R0
00009a 9701      	SBIW R24,1
00009b f7e1      	BRNE __GLOBAL_INI_LOOP
00009c 01fb      	MOVW R30,R22
00009d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009f bfed      	OUT  SPL,R30
0000a0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a3 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a4 940c 00a6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 
                 ; 0000 0024 // Declare your local variables here
                 ; 0000 0025 
                 ; 0000 0026 // Input/Output Ports initialization
                 ; 0000 0027 // Port A initialization
                 ; 0000 0028 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0029 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 bbea      	OUT  0x1A,R30
                 ; 0000 002A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
0000a8 bbeb      	OUT  0x1B,R30
                 ; 0000 002C 
                 ; 0000 002D // Port B initialization
                 ; 0000 002E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
0000a9 bbe7      	OUT  0x17,R30
                 ; 0000 0030 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0031 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
0000aa bbe8      	OUT  0x18,R30
                 ; 0000 0032 
                 ; 0000 0033 // Port C initialization
                 ; 0000 0034 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0035 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0< ...
0000ab bbe4      	OUT  0x14,R30
                 ; 0000 0036 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0037 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
0000ac bbe5      	OUT  0x15,R30
                 ; 0000 0038 
                 ; 0000 0039 // Port D initialization
                 ; 0000 003A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
0000ad bbe1      	OUT  0x11,R30
                 ; 0000 003C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
0000ae bbe2      	OUT  0x12,R30
                 ; 0000 003E 
                 ; 0000 003F // Timer/Counter 0 initialization
                 ; 0000 0040 // Clock source: System Clock
                 ; 0000 0041 // Clock value: Timer 0 Stopped
                 ; 0000 0042 // Mode: Normal top=0xFF
                 ; 0000 0043 // OC0 output: Disconnected
                 ; 0000 0044 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01)  ...
0000af bfe3      	OUT  0x33,R30
                 ; 0000 0045 TCNT0=0x00;
0000b0 bfe2      	OUT  0x32,R30
                 ; 0000 0046 OCR0=0x00;
0000b1 bfec      	OUT  0x3C,R30
                 ; 0000 0047 
                 ; 0000 0048 // Timer/Counter 1 initialization
                 ; 0000 0049 // Clock source: System Clock
                 ; 0000 004A // Clock value: Timer1 Stopped
                 ; 0000 004B // Mode: Normal top=0xFFFF
                 ; 0000 004C // OC1A output: Disconnected
                 ; 0000 004D // OC1B output: Disconnected
                 ; 0000 004E // Noise Canceler: Off
                 ; 0000 004F // Input Capture on Falling Edge
                 ; 0000 0050 // Timer1 Overflow Interrupt: Off
                 ; 0000 0051 // Input Capture Interrupt: Off
                 ; 0000 0052 // Compare A Match Interrupt: Off
                 ; 0000 0053 // Compare B Match Interrupt: Off
                 ; 0000 0054 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
0000b2 bdef      	OUT  0x2F,R30
                 ; 0000 0055 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
0000b3 bdee      	OUT  0x2E,R30
                 ; 0000 0056 TCNT1H=0x00;
0000b4 bded      	OUT  0x2D,R30
                 ; 0000 0057 TCNT1L=0x00;
0000b5 bdec      	OUT  0x2C,R30
                 ; 0000 0058 ICR1H=0x00;
0000b6 bde7      	OUT  0x27,R30
                 ; 0000 0059 ICR1L=0x00;
0000b7 bde6      	OUT  0x26,R30
                 ; 0000 005A OCR1AH=0x00;
0000b8 bdeb      	OUT  0x2B,R30
                 ; 0000 005B OCR1AL=0x00;
0000b9 bdea      	OUT  0x2A,R30
                 ; 0000 005C OCR1BH=0x00;
0000ba bde9      	OUT  0x29,R30
                 ; 0000 005D OCR1BL=0x00;
0000bb bde8      	OUT  0x28,R30
                 ; 0000 005E 
                 ; 0000 005F // Timer/Counter 2 initialization
                 ; 0000 0060 // Clock source: System Clock
                 ; 0000 0061 // Clock value: Timer2 Stopped
                 ; 0000 0062 // Mode: Normal top=0xFF
                 ; 0000 0063 // OC2 output: Disconnected
                 ; 0000 0064 ASSR=0<<AS2;
0000bc bde2      	OUT  0x22,R30
                 ; 0000 0065 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
0000bd bde5      	OUT  0x25,R30
                 ; 0000 0066 TCNT2=0x00;
0000be bde4      	OUT  0x24,R30
                 ; 0000 0067 OCR2=0x00;
0000bf bde3      	OUT  0x23,R30
                 ; 0000 0068 
                 ; 0000 0069 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 006A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
0000c0 bfe9      	OUT  0x39,R30
                 ; 0000 006B 
                 ; 0000 006C // External Interrupt(s) initialization
                 ; 0000 006D // INT0: Off
                 ; 0000 006E // INT1: Off
                 ; 0000 006F // INT2: Off
                 ; 0000 0070 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c1 bfe5      	OUT  0x35,R30
                 ; 0000 0071 MCUCSR=(0<<ISC2);
0000c2 bfe4      	OUT  0x34,R30
                 ; 0000 0072 
                 ; 0000 0073 // USART initialization
                 ; 0000 0074 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0075 // USART Receiver: On
                 ; 0000 0076 // USART Transmitter: On
                 ; 0000 0077 // USART Mode: Asynchronous
                 ; 0000 0078 // USART Baud Rate: 9600
                 ; 0000 0079 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) ...
0000c3 b9eb      	OUT  0xB,R30
                 ; 0000 007A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2)  ...
0000c4 e1e8      	LDI  R30,LOW(24)
0000c5 b9ea      	OUT  0xA,R30
                 ; 0000 007B UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | ...
0000c6 e8e6      	LDI  R30,LOW(134)
0000c7 bde0      	OUT  0x20,R30
                 ; 0000 007C UBRRH=0x00;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bde0      	OUT  0x20,R30
                 ; 0000 007D UBRRL=0x4D;
0000ca e4ed      	LDI  R30,LOW(77)
0000cb b9e9      	OUT  0x9,R30
                 ; 0000 007E 
                 ; 0000 007F // Analog Comparator initialization
                 ; 0000 0080 // Analog Comparator: Off
                 ; 0000 0081 // The Analog Comparator's positive input is
                 ; 0000 0082 // connected to the AIN0 pin
                 ; 0000 0083 // The Analog Comparator's negative input is
                 ; 0000 0084 // connected to the AIN1 pin
                 ; 0000 0085 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
0000cc e8e0      	LDI  R30,LOW(128)
0000cd b9e8      	OUT  0x8,R30
                 ; 0000 0086 SFIOR=(0<<ACME);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bfe0      	OUT  0x30,R30
                 ; 0000 0087 
                 ; 0000 0088 // ADC initialization
                 ; 0000 0089 // ADC disabled
                 ; 0000 008A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
0000d0 b9e6      	OUT  0x6,R30
                 ; 0000 008B 
                 ; 0000 008C // SPI initialization
                 ; 0000 008D // SPI disabled
                 ; 0000 008E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
0000d1 b9ed      	OUT  0xD,R30
                 ; 0000 008F 
                 ; 0000 0090 // TWI initialization
                 ; 0000 0091 // TWI disabled
                 ; 0000 0092 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d2 bfe6      	OUT  0x36,R30
                 ; 0000 0093 
                 ; 0000 0094 // Alphanumeric LCD initialization
                 ; 0000 0095 // Connections are specified in the
                 ; 0000 0096 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0097 // RS - PORTC Bit 0
                 ; 0000 0098 // RD - PORTC Bit 1
                 ; 0000 0099 // EN - PORTC Bit 2
                 ; 0000 009A // D4 - PORTC Bit 4
                 ; 0000 009B // D5 - PORTC Bit 5
                 ; 0000 009C // D6 - PORTC Bit 6
                 ; 0000 009D // D7 - PORTC Bit 7
                 ; 0000 009E // Characters/line: 16
                 ; 0000 009F DDRA=0x00;
0000d3 bbea      	OUT  0x1A,R30
                 ; 0000 00A0 PORTA=0x07;
0000d4 e0e7      	LDI  R30,LOW(7)
0000d5 bbeb      	OUT  0x1B,R30
                 ; 0000 00A1 lcd_init(16);
0000d6 e1a0      	LDI  R26,LOW(16)
0000d7 d0a0      	RCALL _lcd_init
                 ; 0000 00A2 printf("Kirim Data USART \r");
                +
0000d8 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000da 940e 0338 	CALL SUBOPT_0x0
                 ; 0000 00A3 printf("Tekan Tombol Untuk Mengirim Data \r");
                +
0000dc e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
0000dd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
0000de 940e 0338 	CALL SUBOPT_0x0
                 ; 0000 00A4 while (1)
                 _0x3:
                 ; 0000 00A5 {
                 ; 0000 00A6 if(PINA.0 == 0)
0000e0 99c8      	SBIC 0x19,0
0000e1 c009      	RJMP _0x6
                 ; 0000 00A7 {
                 ; 0000 00A8 while(PINA.0 == 0);
                 _0x7:
0000e2 9bc8      	SBIS 0x19,0
0000e3 cffe      	RJMP _0x7
                 ; 0000 00A9 //delay_ms(200);
                 ; 0000 00AA lcd_clear();
0000e4 940e 033f 	CALL SUBOPT_0x1
                 ; 0000 00AB printf("Fathan Nova Arroyan \r");
                 ; 0000 00AC lcd_gotoxy(0,0);
0000e6 940e 0344 	CALL SUBOPT_0x2
                 ; 0000 00AD lcd_putsf("Fathan Nova Arroyan");
                +
0000e8 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 76 ) )
0000e9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 76 ) )
                 	__POINTW2FN _0x0,76
0000ea d07c      	RCALL _lcd_putsf
                 ; 0000 00AE //  delay_ms(200);
                 ; 0000 00AF }
                 ; 0000 00B0 if(PINA.1 == 0)
                 _0x6:
0000eb 99c9      	SBIC 0x19,1
0000ec c00f      	RJMP _0xA
                 ; 0000 00B1 {
                 ; 0000 00B2 lcd_putsf("Tombol 2");
                +
0000ed eca6     +LDI R26 , LOW ( 2 * _0x0 + ( 96 ) )
0000ee e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW2FN _0x0,96
0000ef d077      	RCALL _lcd_putsf
                 ; 0000 00B3 while(PINA.1 == 0){}
                 _0xB:
0000f0 9bc9      	SBIS 0x19,1
0000f1 cffe      	RJMP _0xB
                 ; 0000 00B4 //delay_ms(200);
                 ; 0000 00B5 lcd_clear();
0000f2 d054      	RCALL _lcd_clear
                 ; 0000 00B6 printf("24.11.6064 \r");
                +
0000f3 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 105 ) )
0000f4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW1FN _0x0,105
0000f5 940e 0338 	CALL SUBOPT_0x0
                 ; 0000 00B7 lcd_gotoxy(0,0);
0000f7 940e 0344 	CALL SUBOPT_0x2
                 ; 0000 00B8 lcd_putsf("24.11.6064");
                +
0000f9 edac     +LDI R26 , LOW ( 2 * _0x0 + ( 118 ) )
0000fa e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 118 ) )
                 	__POINTW2FN _0x0,118
0000fb d06b      	RCALL _lcd_putsf
                 ; 0000 00B9 //  delay_ms(200);
                 ; 0000 00BA }
                 ; 0000 00BB if(PINA.2 == 0)
                 _0xA:
0000fc 99ca      	SBIC 0x19,2
0000fd c014      	RJMP _0xE
                 ; 0000 00BC {
                 ; 0000 00BD while(PINA.2 == 0){}
                 _0xF:
0000fe 9bca      	SBIS 0x19,2
0000ff cffe      	RJMP _0xF
                 ; 0000 00BE // delay_ms(200);
                 ; 0000 00BF lcd_clear();
000100 940e 033f 	CALL SUBOPT_0x1
                 ; 0000 00C0 printf("Fathan Nova Arroyan \r");
                 ; 0000 00C1 printf("24.11.6064 \r");
                +
000102 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 105 ) )
000103 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW1FN _0x0,105
000104 940e 0338 	CALL SUBOPT_0x0
                 ; 0000 00C2 lcd_gotoxy(0,0);
000106 940e 0344 	CALL SUBOPT_0x2
                 ; 0000 00C3 lcd_putsf("Fathan Nova Arroyan");
                +
000108 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 76 ) )
000109 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 76 ) )
                 	__POINTW2FN _0x0,76
00010a d05c      	RCALL _lcd_putsf
                 ; 0000 00C4 lcd_gotoxy(0,2);
00010b e0e0      	LDI  R30,LOW(0)
00010c 93ea      	ST   -Y,R30
00010d e0a2      	LDI  R26,LOW(2)
00010e d026      	RCALL _lcd_gotoxy
                 ; 0000 00C5 lcd_putsf("24.11.6064");
                +
00010f edac     +LDI R26 , LOW ( 2 * _0x0 + ( 118 ) )
000110 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 118 ) )
                 	__POINTW2FN _0x0,118
000111 d055      	RCALL _lcd_putsf
                 ; 0000 00C6 // delay_ms(200);
                 ; 0000 00C7 }
                 ; 0000 00C8 
                 ; 0000 00C9 }
                 _0xE:
000112 cfcd      	RJMP _0x3
                 ; 0000 00CA }
                 _0x12:
000113 cfff      	RJMP _0x12
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000114 931a      	ST   -Y,R17
000115 2f1a      	MOV  R17,R26
000116 b3e5      	IN   R30,0x15
000117 70ef      	ANDI R30,LOW(0xF)
000118 2fae      	MOV  R26,R30
000119 2fe1      	MOV  R30,R17
00011a 7fe0      	ANDI R30,LOW(0xF0)
00011b 2bea      	OR   R30,R26
00011c bbe5      	OUT  0x15,R30
                +
00011d e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
00011e 958a     +DEC R24
00011f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
000120 9aaa      	SBI  0x15,2
                +
000121 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
000122 958a     +DEC R24
000123 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
000124 98aa      	CBI  0x15,2
                +
000125 e184     +LDI R24 , LOW ( 20 )
                +__DELAY_USB_LOOP :
000126 958a     +DEC R24
000127 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 20
000128 c07c      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000129 93aa      	ST   -Y,R26
00012a 81a8      	LD   R26,Y
00012b dfe8      	RCALL __lcd_write_nibble_G100
00012c 81e8          ld    r30,y
00012d 95e2          swap  r30
00012e 83e8          st    y,r30
00012f 81a8      	LD   R26,Y
000130 dfe3      	RCALL __lcd_write_nibble_G100
                +
000131 ec88     +LDI R24 , LOW ( 200 )
                +__DELAY_USB_LOOP :
000132 958a     +DEC R24
000133 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 200
000134 c077      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000135 931a      	ST   -Y,R17
000136 930a      	ST   -Y,R16
000137 2f1a      	MOV  R17,R26
000138 810a      	LDD  R16,Y+2
000139 2fe1      	MOV  R30,R17
00013a e0f0      	LDI  R31,0
00013b 5ae0      	SUBI R30,LOW(-__base_y_G100)
00013c 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00013d 81e0      	LD   R30,Z
00013e 0fe0      	ADD  R30,R16
00013f 2fae      	MOV  R26,R30
000140 dfe8      	RCALL __lcd_write_data
000141 2e50      	MOV  R5,R16
000142 2e41      	MOV  R4,R17
000143 8119      	LDD  R17,Y+1
000144 8108      	LDD  R16,Y+0
000145 9623      	ADIW R28,3
000146 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000147 e0a2      	LDI  R26,LOW(2)
000148 940e 0349 	CALL SUBOPT_0x3
00014a e0ac      	LDI  R26,LOW(12)
00014b dfdd      	RCALL __lcd_write_data
00014c e0a1      	LDI  R26,LOW(1)
00014d 940e 0349 	CALL SUBOPT_0x3
00014f e0e0      	LDI  R30,LOW(0)
000150 2e4e      	MOV  R4,R30
000151 2e5e      	MOV  R5,R30
000152 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000153 931a      	ST   -Y,R17
000154 2f1a      	MOV  R17,R26
000155 301a      	CPI  R17,10
000156 f011      	BREQ _0x2000005
000157 1457      	CP   R5,R7
000158 f040      	BRLO _0x2000004
                 _0x2000005:
000159 e0e0      	LDI  R30,LOW(0)
00015a 93ea      	ST   -Y,R30
00015b 9443      	INC  R4
00015c 2da4      	MOV  R26,R4
00015d dfd7      	RCALL _lcd_gotoxy
00015e 301a      	CPI  R17,10
00015f f409      	BRNE _0x2000007
000160 c044      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000161 9453      	INC  R5
000162 9aa8      	SBI  0x15,0
000163 2fa1      	MOV  R26,R17
000164 dfc4      	RCALL __lcd_write_data
000165 98a8      	CBI  0x15,0
000166 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000167 940e 0376 	CALL __SAVELOCR4
000169 019d      	MOVW R18,R26
                 _0x200000B:
00016a 01f9      	MOVW R30,R18
                +
00016b 5f2f     +SUBI R18 , LOW ( - 1 )
00016c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00016d 91e4      	LPM  R30,Z
00016e 2f1e      	MOV  R17,R30
00016f 30e0      	CPI  R30,0
000170 f019      	BREQ _0x200000D
000171 2fa1      	MOV  R26,R17
000172 dfe0      	RCALL _lcd_putchar
000173 cff6      	RJMP _0x200000B
                 _0x200000D:
000174 940e 037d 	CALL __LOADLOCR4
000176 9624      	ADIW R28,4
000177 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000178 931a      	ST   -Y,R17
000179 2f1a      	MOV  R17,R26
00017a b3e4      	IN   R30,0x14
00017b 6fe0      	ORI  R30,LOW(0xF0)
00017c bbe4      	OUT  0x14,R30
00017d 9aa2      	SBI  0x14,2
00017e 9aa0      	SBI  0x14,0
00017f 9aa1      	SBI  0x14,1
000180 98aa      	CBI  0x15,2
000181 98a8      	CBI  0x15,0
000182 98a9      	CBI  0x15,1
000183 2e71      	MOV  R7,R17
000184 2fe1      	MOV  R30,R17
000185 58e0      	SUBI R30,-LOW(128)
                +
000186 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000188 2fe1      	MOV  R30,R17
000189 54e0      	SUBI R30,-LOW(192)
                +
00018a 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00018c e1a4      	LDI  R26,LOW(20)
00018d e0b0      	LDI  R27,0
00018e 940e 0392 	CALL _delay_ms
000190 940e 034f 	CALL SUBOPT_0x4
000192 940e 034f 	CALL SUBOPT_0x4
000194 940e 034f 	CALL SUBOPT_0x4
000196 e2a0      	LDI  R26,LOW(32)
000197 df7c      	RCALL __lcd_write_nibble_G100
                +
000198 e28c     +LDI R24 , LOW ( 300 )
000199 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
00019a 9701     +SBIW R24 , 1
00019b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
00019c e2a8      	LDI  R26,LOW(40)
00019d df8b      	RCALL __lcd_write_data
00019e e0a4      	LDI  R26,LOW(4)
00019f df89      	RCALL __lcd_write_data
0001a0 e8a5      	LDI  R26,LOW(133)
0001a1 df87      	RCALL __lcd_write_data
0001a2 e0a6      	LDI  R26,LOW(6)
0001a3 df85      	RCALL __lcd_write_data
0001a4 dfa2      	RCALL _lcd_clear
                 _0x2080002:
0001a5 9119      	LD   R17,Y+
0001a6 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001a7 93aa      	ST   -Y,R26
                 putchar0:
0001a8 9b5d           sbis usr,udre
0001a9 cffe           rjmp putchar0
0001aa 81e8           ld   r30,y
0001ab b9ec           out  udr,r30
                 _0x2080001:
0001ac 9621      	ADIW R28,1
0001ad 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0001ae 940e 0376 	CALL __SAVELOCR4
0001b0 018d      	MOVW R16,R26
0001b1 813c      	LDD  R19,Y+4
0001b2 2fa3      	MOV  R26,R19
0001b3 dff3      	RCALL _putchar
0001b4 01d8      	MOVW R26,R16
0001b5 91ed      	LD   R30,X+
0001b6 91fd      	LD   R31,X+
0001b7 9631      	ADIW R30,1
0001b8 93fe      	ST   -X,R31
0001b9 93ee      	ST   -X,R30
0001ba 940e 037d 	CALL __LOADLOCR4
0001bc 9625      	ADIW R28,5
0001bd 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001be 93ba      	ST   -Y,R27
0001bf 93aa      	ST   -Y,R26
0001c0 9726      	SBIW R28,6
0001c1 940e 0374 	CALL __SAVELOCR6
0001c3 e010      	LDI  R17,0
0001c4 85ac      	LDD  R26,Y+12
0001c5 85bd      	LDD  R27,Y+12+1
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 e0f0      	LDI  R31,HIGH(0)
0001c8 93ed      	ST   X+,R30
0001c9 93fc      	ST   X,R31
                 _0x2020016:
0001ca 89ea      	LDD  R30,Y+18
0001cb 89fb      	LDD  R31,Y+18+1
0001cc 9631      	ADIW R30,1
0001cd 8bea      	STD  Y+18,R30
0001ce 8bfb      	STD  Y+18+1,R31
0001cf 9731      	SBIW R30,1
0001d0 91e4      	LPM  R30,Z
0001d1 2f2e      	MOV  R18,R30
0001d2 30e0      	CPI  R30,0
0001d3 f409      	BRNE PC+2
0001d4 c11d      	RJMP _0x2020018
0001d5 2fe1      	MOV  R30,R17
0001d6 30e0      	CPI  R30,0
0001d7 f439      	BRNE _0x202001C
0001d8 3225      	CPI  R18,37
0001d9 f411      	BRNE _0x202001D
0001da e011      	LDI  R17,LOW(1)
0001db c002      	RJMP _0x202001E
                 _0x202001D:
0001dc 940e 0357 	CALL SUBOPT_0x5
                 _0x202001E:
0001de c112      	RJMP _0x202001B
                 _0x202001C:
0001df 30e1      	CPI  R30,LOW(0x1)
0001e0 f4a9      	BRNE _0x202001F
0001e1 3225      	CPI  R18,37
0001e2 f419      	BRNE _0x2020020
0001e3 940e 0357 	CALL SUBOPT_0x5
0001e5 c10a      	RJMP _0x20200CC
                 _0x2020020:
0001e6 e012      	LDI  R17,LOW(2)
0001e7 e040      	LDI  R20,LOW(0)
0001e8 e000      	LDI  R16,LOW(0)
0001e9 322d      	CPI  R18,45
0001ea f411      	BRNE _0x2020021
0001eb e001      	LDI  R16,LOW(1)
0001ec c104      	RJMP _0x202001B
                 _0x2020021:
0001ed 322b      	CPI  R18,43
0001ee f411      	BRNE _0x2020022
0001ef e24b      	LDI  R20,LOW(43)
0001f0 c100      	RJMP _0x202001B
                 _0x2020022:
0001f1 3220      	CPI  R18,32
0001f2 f411      	BRNE _0x2020023
0001f3 e240      	LDI  R20,LOW(32)
0001f4 c0fc      	RJMP _0x202001B
                 _0x2020023:
0001f5 c002      	RJMP _0x2020024
                 _0x202001F:
0001f6 30e2      	CPI  R30,LOW(0x2)
0001f7 f439      	BRNE _0x2020025
                 _0x2020024:
0001f8 e050      	LDI  R21,LOW(0)
0001f9 e013      	LDI  R17,LOW(3)
0001fa 3320      	CPI  R18,48
0001fb f411      	BRNE _0x2020026
0001fc 6800      	ORI  R16,LOW(128)
0001fd c0f3      	RJMP _0x202001B
                 _0x2020026:
0001fe c003      	RJMP _0x2020027
                 _0x2020025:
0001ff 30e3      	CPI  R30,LOW(0x3)
000200 f009      	BREQ PC+2
000201 c0ef      	RJMP _0x202001B
                 _0x2020027:
000202 3320      	CPI  R18,48
000203 f010      	BRLO _0x202002A
000204 332a      	CPI  R18,58
000205 f008      	BRLO _0x202002B
                 _0x202002A:
000206 c007      	RJMP _0x2020029
                 _0x202002B:
000207 e0aa      	LDI  R26,LOW(10)
000208 9f5a      	MUL  R21,R26
000209 2d50      	MOV  R21,R0
00020a 2fe2      	MOV  R30,R18
00020b 53e0      	SUBI R30,LOW(48)
00020c 0f5e      	ADD  R21,R30
00020d c0e3      	RJMP _0x202001B
                 _0x2020029:
00020e 2fe2      	MOV  R30,R18
00020f 36e3      	CPI  R30,LOW(0x63)
000210 f449      	BRNE _0x202002F
000211 940e 035e 	CALL SUBOPT_0x6
000213 89e8      	LDD  R30,Y+16
000214 89f9      	LDD  R31,Y+16+1
000215 81a4      	LDD  R26,Z+4
000216 93aa      	ST   -Y,R26
000217 940e 0364 	CALL SUBOPT_0x7
000219 c0d6      	RJMP _0x2020030
                 _0x202002F:
00021a 37e3      	CPI  R30,LOW(0x73)
00021b f441      	BRNE _0x2020032
00021c 940e 035e 	CALL SUBOPT_0x6
00021e 940e 036a 	CALL SUBOPT_0x8
000220 940e 031f 	CALL _strlen
000222 2f1e      	MOV  R17,R30
000223 c00a      	RJMP _0x2020033
                 _0x2020032:
000224 37e0      	CPI  R30,LOW(0x70)
000225 f461      	BRNE _0x2020035
000226 940e 035e 	CALL SUBOPT_0x6
000228 940e 036a 	CALL SUBOPT_0x8
00022a 940e 032b 	CALL _strlenf
00022c 2f1e      	MOV  R17,R30
00022d 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00022e 6002      	ORI  R16,LOW(2)
00022f 770f      	ANDI R16,LOW(127)
000230 e030      	LDI  R19,LOW(0)
000231 c03c      	RJMP _0x2020036
                 _0x2020035:
000232 36e4      	CPI  R30,LOW(0x64)
000233 f011      	BREQ _0x2020039
000234 36e9      	CPI  R30,LOW(0x69)
000235 f411      	BRNE _0x202003A
                 _0x2020039:
000236 6004      	ORI  R16,LOW(4)
000237 c002      	RJMP _0x202003B
                 _0x202003A:
000238 37e5      	CPI  R30,LOW(0x75)
000239 f431      	BRNE _0x202003C
                 _0x202003B:
00023a e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00023b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00023c 83ee      	STD  Y+6,R30
00023d 83ff      	STD  Y+6+1,R31
00023e e015      	LDI  R17,LOW(5)
00023f c00c      	RJMP _0x202003D
                 _0x202003C:
000240 35e8      	CPI  R30,LOW(0x58)
000241 f411      	BRNE _0x202003F
000242 6008      	ORI  R16,LOW(8)
000243 c003      	RJMP _0x2020040
                 _0x202003F:
000244 37e8      	CPI  R30,LOW(0x78)
000245 f009      	BREQ PC+2
000246 c0a9      	RJMP _0x2020071
                 _0x2020040:
000247 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000248 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000249 83ee      	STD  Y+6,R30
00024a 83ff      	STD  Y+6+1,R31
00024b e014      	LDI  R17,LOW(4)
                 _0x202003D:
00024c ff02      	SBRS R16,2
00024d c017      	RJMP _0x2020042
00024e 940e 035e 	CALL SUBOPT_0x6
000250 89a8      	LDD  R26,Y+16
000251 89b9      	LDD  R27,Y+16+1
000252 9614      	ADIW R26,4
000253 91ed      	LD   R30,X+
000254 91fd      	LD   R31,X+
000255 87ea      	STD  Y+10,R30
000256 87fb      	STD  Y+10+1,R31
000257 85ab      	LDD  R26,Y+11
000258 23aa      	TST  R26
000259 f42a      	BRPL _0x2020043
00025a 940e 0386 	CALL __ANEGW1
00025c 87ea      	STD  Y+10,R30
00025d 87fb      	STD  Y+10+1,R31
00025e e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00025f 3040      	CPI  R20,0
000260 f011      	BREQ _0x2020044
000261 5f1f      	SUBI R17,-LOW(1)
000262 c001      	RJMP _0x2020045
                 _0x2020044:
000263 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000264 c009      	RJMP _0x2020046
                 _0x2020042:
000265 940e 035e 	CALL SUBOPT_0x6
000267 89a8      	LDD  R26,Y+16
000268 89b9      	LDD  R27,Y+16+1
000269 9614      	ADIW R26,4
00026a 940e 038a 	CALL __GETW1P
00026c 87ea      	STD  Y+10,R30
00026d 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
00026e fd00      	SBRC R16,0
00026f c011      	RJMP _0x2020047
                 _0x2020048:
000270 1715      	CP   R17,R21
000271 f478      	BRSH _0x202004A
000272 ff07      	SBRS R16,7
000273 c008      	RJMP _0x202004B
000274 ff02      	SBRS R16,2
000275 c004      	RJMP _0x202004C
000276 7f0b      	ANDI R16,LOW(251)
000277 2f24      	MOV  R18,R20
000278 5011      	SUBI R17,LOW(1)
000279 c001      	RJMP _0x202004D
                 _0x202004C:
00027a e320      	LDI  R18,LOW(48)
                 _0x202004D:
00027b c001      	RJMP _0x202004E
                 _0x202004B:
00027c e220      	LDI  R18,LOW(32)
                 _0x202004E:
00027d 940e 0357 	CALL SUBOPT_0x5
00027f 5051      	SUBI R21,LOW(1)
000280 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000281 2f31      	MOV  R19,R17
000282 ff01      	SBRS R16,1
000283 c017      	RJMP _0x202004F
                 _0x2020050:
000284 3030      	CPI  R19,0
000285 f0a1      	BREQ _0x2020052
000286 ff03      	SBRS R16,3
000287 c006      	RJMP _0x2020053
000288 81ee      	LDD  R30,Y+6
000289 81ff      	LDD  R31,Y+6+1
00028a 9125      	LPM  R18,Z+
00028b 83ee      	STD  Y+6,R30
00028c 83ff      	STD  Y+6+1,R31
00028d c005      	RJMP _0x2020054
                 _0x2020053:
00028e 81ae      	LDD  R26,Y+6
00028f 81bf      	LDD  R27,Y+6+1
000290 912d      	LD   R18,X+
000291 83ae      	STD  Y+6,R26
000292 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000293 940e 0357 	CALL SUBOPT_0x5
000295 3050      	CPI  R21,0
000296 f009      	BREQ _0x2020055
000297 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000298 5031      	SUBI R19,LOW(1)
000299 cfea      	RJMP _0x2020050
                 _0x2020052:
00029a c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00029b e320      	LDI  R18,LOW(48)
00029c 81ee      	LDD  R30,Y+6
00029d 81ff      	LDD  R31,Y+6+1
00029e 940e 038e 	CALL __GETW1PF
0002a0 87e8      	STD  Y+8,R30
0002a1 87f9      	STD  Y+8+1,R31
0002a2 81ee      	LDD  R30,Y+6
0002a3 81ff      	LDD  R31,Y+6+1
0002a4 9632      	ADIW R30,2
0002a5 83ee      	STD  Y+6,R30
0002a6 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002a7 85e8      	LDD  R30,Y+8
0002a8 85f9      	LDD  R31,Y+8+1
0002a9 85aa      	LDD  R26,Y+10
0002aa 85bb      	LDD  R27,Y+10+1
0002ab 17ae      	CP   R26,R30
0002ac 07bf      	CPC  R27,R31
0002ad f050      	BRLO _0x202005C
0002ae 5f2f      	SUBI R18,-LOW(1)
0002af 85a8      	LDD  R26,Y+8
0002b0 85b9      	LDD  R27,Y+8+1
0002b1 85ea      	LDD  R30,Y+10
0002b2 85fb      	LDD  R31,Y+10+1
0002b3 1bea      	SUB  R30,R26
0002b4 0bfb      	SBC  R31,R27
0002b5 87ea      	STD  Y+10,R30
0002b6 87fb      	STD  Y+10+1,R31
0002b7 cfef      	RJMP _0x202005A
                 _0x202005C:
0002b8 332a      	CPI  R18,58
0002b9 f028      	BRLO _0x202005D
0002ba ff03      	SBRS R16,3
0002bb c002      	RJMP _0x202005E
0002bc 5f29      	SUBI R18,-LOW(7)
0002bd c001      	RJMP _0x202005F
                 _0x202005E:
0002be 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002bf fd04      	SBRC R16,4
0002c0 c01a      	RJMP _0x2020061
0002c1 3321      	CPI  R18,49
0002c2 f420      	BRSH _0x2020063
0002c3 85a8      	LDD  R26,Y+8
0002c4 85b9      	LDD  R27,Y+8+1
0002c5 9711      	SBIW R26,1
0002c6 f409      	BRNE _0x2020062
                 _0x2020063:
0002c7 c009      	RJMP _0x20200CD
                 _0x2020062:
0002c8 1753      	CP   R21,R19
0002c9 f010      	BRLO _0x2020067
0002ca ff00      	SBRS R16,0
0002cb c001      	RJMP _0x2020068
                 _0x2020067:
0002cc c013      	RJMP _0x2020066
                 _0x2020068:
0002cd e220      	LDI  R18,LOW(32)
0002ce ff07      	SBRS R16,7
0002cf c00b      	RJMP _0x2020069
0002d0 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002d1 6100      	ORI  R16,LOW(16)
0002d2 ff02      	SBRS R16,2
0002d3 c007      	RJMP _0x202006A
0002d4 7f0b      	ANDI R16,LOW(251)
0002d5 934a      	ST   -Y,R20
0002d6 940e 0364 	CALL SUBOPT_0x7
0002d8 3050      	CPI  R21,0
0002d9 f009      	BREQ _0x202006B
0002da 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002db 940e 0357 	CALL SUBOPT_0x5
0002dd 3050      	CPI  R21,0
0002de f009      	BREQ _0x202006C
0002df 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002e0 5031      	SUBI R19,LOW(1)
0002e1 85a8      	LDD  R26,Y+8
0002e2 85b9      	LDD  R27,Y+8+1
0002e3 9712      	SBIW R26,2
0002e4 f008      	BRLO _0x2020059
0002e5 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002e6 ff00      	SBRS R16,0
0002e7 c008      	RJMP _0x202006D
                 _0x202006E:
0002e8 3050      	CPI  R21,0
0002e9 f031      	BREQ _0x2020070
0002ea 5051      	SUBI R21,LOW(1)
0002eb e2e0      	LDI  R30,LOW(32)
0002ec 93ea      	ST   -Y,R30
0002ed 940e 0364 	CALL SUBOPT_0x7
0002ef cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002f0 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002f1 ced8      	RJMP _0x2020016
                 _0x2020018:
0002f2 85ac      	LDD  R26,Y+12
0002f3 85bd      	LDD  R27,Y+12+1
0002f4 91ed      	LD   R30,X+
0002f5 91fd      	LD   R31,X+
0002f6 940e 037b 	CALL __LOADLOCR6
0002f8 9664      	ADIW R28,20
0002f9 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002fa 92ff      	PUSH R15
0002fb 2ef8      	MOV  R15,R24
0002fc 9726      	SBIW R28,6
0002fd 931a      	ST   -Y,R17
0002fe 930a      	ST   -Y,R16
0002ff 01de      	MOVW R26,R28
000300 9614      	ADIW R26,4
000301 940e 0382 	CALL __ADDW2R15
000303 018d      	MOVW R16,R26
000304 e0e0      	LDI  R30,LOW(0)
000305 83ec      	STD  Y+4,R30
000306 83ed      	STD  Y+4+1,R30
000307 83ee      	STD  Y+6,R30
000308 83ef      	STD  Y+6+1,R30
000309 01de      	MOVW R26,R28
00030a 9618      	ADIW R26,8
00030b 940e 0382 	CALL __ADDW2R15
00030d 91ed      	LD   R30,X+
00030e 91fd      	LD   R31,X+
00030f 93fa      	ST   -Y,R31
000310 93ea      	ST   -Y,R30
000311 931a      	ST   -Y,R17
000312 930a      	ST   -Y,R16
000313 eaee      	LDI  R30,LOW(_put_usart_G101)
000314 e0f1      	LDI  R31,HIGH(_put_usart_G101)
000315 93fa      	ST   -Y,R31
000316 93ea      	ST   -Y,R30
000317 01de      	MOVW R26,R28
000318 9618      	ADIW R26,8
000319 dea4      	RCALL __print_G101
00031a 8119      	LDD  R17,Y+1
00031b 8108      	LDD  R16,Y+0
00031c 9628      	ADIW R28,8
00031d 90ff      	POP  R15
00031e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00031f 93ba      	ST   -Y,R27
000320 93aa      	ST   -Y,R26
000321 91a9          ld   r26,y+
000322 91b9          ld   r27,y+
000323 27ee          clr  r30
000324 27ff          clr  r31
                 strlen0:
000325 916d          ld   r22,x+
000326 2366          tst  r22
000327 f011          breq strlen1
000328 9631          adiw r30,1
000329 cffb          rjmp strlen0
                 strlen1:
00032a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00032b 93ba      	ST   -Y,R27
00032c 93aa      	ST   -Y,R26
00032d 27aa          clr  r26
00032e 27bb          clr  r27
00032f 91e9          ld   r30,y+
000330 91f9          ld   r31,y+
                 strlenf0:
000331 9005      	lpm  r0,z+
000332 2000          tst  r0
000333 f011          breq strlenf1
000334 9611          adiw r26,1
000335 cffb          rjmp strlenf0
                 strlenf1:
000336 01fd          movw r30,r26
000337 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
000338 93fa      	ST   -Y,R31
000339 93ea      	ST   -Y,R30
00033a e080      	LDI  R24,0
00033b 940e 02fa 	CALL _printf
00033d 9622      	ADIW R28,2
00033e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00033f 940e 0147 	CALL _lcd_clear
                +
000341 e9ec     +LDI R30 , LOW ( 2 * _0x0 + ( 54 ) )
000342 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 54 ) )
                 	__POINTW1FN _0x0,54
000343 cff4      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000344 e0e0      	LDI  R30,LOW(0)
000345 93ea      	ST   -Y,R30
000346 e0a0      	LDI  R26,LOW(0)
000347 940c 0135 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000349 940e 0129 	CALL __lcd_write_data
00034b e0a3      	LDI  R26,LOW(3)
00034c e0b0      	LDI  R27,0
00034d 940c 0392 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
00034f e3a0      	LDI  R26,LOW(48)
000350 940e 0114 	CALL __lcd_write_nibble_G100
                +
000352 e28c     +LDI R24 , LOW ( 300 )
000353 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000354 9701     +SBIW R24 , 1
000355 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
000356 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
000357 932a      	ST   -Y,R18
000358 85ad      	LDD  R26,Y+13
000359 85be      	LDD  R27,Y+13+1
00035a 85ef      	LDD  R30,Y+15
00035b 89f8      	LDD  R31,Y+15+1
00035c 9509      	ICALL
00035d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
00035e 89e8      	LDD  R30,Y+16
00035f 89f9      	LDD  R31,Y+16+1
000360 9734      	SBIW R30,4
000361 8be8      	STD  Y+16,R30
000362 8bf9      	STD  Y+16+1,R31
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000364 85ad      	LDD  R26,Y+13
000365 85be      	LDD  R27,Y+13+1
000366 85ef      	LDD  R30,Y+15
000367 89f8      	LDD  R31,Y+15+1
000368 9509      	ICALL
000369 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00036a 89a8      	LDD  R26,Y+16
00036b 89b9      	LDD  R27,Y+16+1
00036c 9614      	ADIW R26,4
00036d 91ed      	LD   R30,X+
00036e 91fd      	LD   R31,X+
00036f 83ee      	STD  Y+6,R30
000370 83ff      	STD  Y+6+1,R31
000371 81ae      	LDD  R26,Y+6
000372 81bf      	LDD  R27,Y+6+1
000373 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000374 935a      	ST   -Y,R21
                 __SAVELOCR5:
000375 934a      	ST   -Y,R20
                 __SAVELOCR4:
000376 933a      	ST   -Y,R19
                 __SAVELOCR3:
000377 932a      	ST   -Y,R18
                 __SAVELOCR2:
000378 931a      	ST   -Y,R17
000379 930a      	ST   -Y,R16
00037a 9508      	RET
                 
                 __LOADLOCR6:
00037b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00037c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00037d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00037e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00037f 8119      	LDD  R17,Y+1
000380 8108      	LD   R16,Y
000381 9508      	RET
                 
                 __ADDW2R15:
000382 2400      	CLR  R0
000383 0daf      	ADD  R26,R15
000384 1db0      	ADC  R27,R0
000385 9508      	RET
                 
                 __ANEGW1:
000386 95f1      	NEG  R31
000387 95e1      	NEG  R30
000388 40f0      	SBCI R31,0
000389 9508      	RET
                 
                 __GETW1P:
00038a 91ed      	LD   R30,X+
00038b 91fc      	LD   R31,X
00038c 9711      	SBIW R26,1
00038d 9508      	RET
                 
                 __GETW1PF:
00038e 9005      	LPM  R0,Z+
00038f 91f4      	LPM  R31,Z
000390 2de0      	MOV  R30,R0
000391 9508      	RET
                 
                 _delay_ms:
000392 9610      	adiw r26,0
000393 f039      	breq __delay_ms1
                 __delay_ms0:
000394 95a8      	wdr
                +
000395 eb88     +LDI R24 , LOW ( 0xBB8 )
000396 e09b     +LDI R25 , HIGH ( 0xBB8 )
                +__DELAY_USW_LOOP :
000397 9701     +SBIW R24 , 1
000398 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xBB8
000399 9711      	sbiw r26,1
00039a f7c9      	brne __delay_ms0
                 __delay_ms1:
00039b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  40 r18:  30 r19:  11 r20:   9 r21:  17 r22:   4 r23:   0 
r24:  23 r25:   5 r26:  85 r27:  31 r28:  13 r29:   1 r30: 185 r31:  54 
x  :  21 y  : 135 z  :  15 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  19 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  29 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  47 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   1 cpi   :  32 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  25 ldd   :  59 ldi   : 103 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  31 movw  :  12 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  49 pop   :   1 push  :   1 rcall :  23 ret   :  23 
reti  :   0 rjmp  :  65 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   5 sbic  :   3 sbis  :   4 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  44 std   :  30 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000738   1690    158   1848   32768   5.6%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
